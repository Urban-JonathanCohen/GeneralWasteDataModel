/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _ = require("lodash"),
    pluralize = require("pluralize");

function peg$subclass(child, parent) {
  function ctor() {
    this.constructor = child;
  }

  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function (expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function literal(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },
    "class": function _class(expectation) {
      var escapedParts = "",
          i;

      for (i = 0; i < expectation.parts.length; i++) {
        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
      }

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },
    any: function any(expectation) {
      return "any character";
    },
    end: function end(expectation) {
      return "end of input";
    },
    other: function other(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
      return '\\x0' + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
      return '\\x' + hex(ch);
    });
  }

  function classEscape(s) {
    return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
      return '\\x0' + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
      return '\\x' + hex(ch);
    });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i,
        j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }

      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},
      peg$startRuleFunctions = {
    rules: peg$parserules
  },
      peg$startRuleFunction = peg$parserules,
      peg$c0 = function peg$c0() {
    return data;
  },
      peg$c1 = function peg$c1(t) {
    data.tables.push(t);
  },
      peg$c2 = function peg$c2(r) {
    data.refs.push(r);
  },
      peg$c3 = function peg$c3(e) {
    data.enums.push(e);
  },
      peg$c4 = function peg$c4(tg) {
    data.tableGroups.push(tg);
  },
      peg$c5 = function peg$c5(p) {
    projectCnt += 1;

    if (projectCnt > 1) {
      error('Project is already defined');
    }

    data.project = p;
    data.tables = data.tables.concat(p.tables);
    data.refs = data.refs.concat(p.refs);
    data.enums = data.enums.concat(p.enums);
    data.tableGroups = data.tableGroups.concat(p.tableGroups);
  },
      peg$c6 = "{",
      peg$c7 = peg$literalExpectation("{", false),
      peg$c8 = "}",
      peg$c9 = peg$literalExpectation("}", false),
      peg$c10 = function peg$c10(name, body) {
    return _objectSpread({
      name: name ? name[1] : null
    }, body);
  },
      peg$c11 = function peg$c11(elements) {
    var tables = [];
    var refs = [];
    var enums = [];
    var tableGroups = [];
    var note = null;
    var projectFields = {};
    elements.forEach(function (ele) {
      if (ele.type === 'table') {
        tables.push(ele.value);
      } else if (ele.type === 'ref') {
        refs.push(ele.value);
      } else if (ele.type === 'enum') {
        enums.push(ele.value);
      } else if (ele.type === 'table_group') {
        tableGroups.push(ele.value);
      } else if (ele.type === 'note') {
        note = ele.value;
      } else {
        projectFields[ele.value.name] = ele.value.value;
      }
    });
    return _objectSpread({
      tables: tables,
      refs: refs,
      enums: enums,
      tableGroups: tableGroups,
      note: note
    }, projectFields);
  },
      peg$c12 = function peg$c12(note) {
    return {
      type: 'note',
      value: note
    };
  },
      peg$c13 = function peg$c13(t) {
    return {
      type: 'table',
      value: t
    };
  },
      peg$c14 = function peg$c14(r) {
    return {
      type: 'ref',
      value: r
    };
  },
      peg$c15 = function peg$c15(e) {
    return {
      type: 'enum',
      value: e
    };
  },
      peg$c16 = function peg$c16(tg) {
    return {
      type: 'table_group',
      value: tg
    };
  },
      peg$c17 = function peg$c17(element) {
    return {
      type: 'element',
      value: element
    };
  },
      peg$c18 = ":",
      peg$c19 = peg$literalExpectation(":", false),
      peg$c20 = function peg$c20(name, value) {
    return {
      name: name,
      value: value.value
    };
  },
      peg$c21 = function peg$c21(name, body) {
    return {
      name: name,
      tables: body,
      token: location()
    };
  },
      peg$c22 = function peg$c22(tables) {
    return tables.map(function (t) {
      return {
        name: t[0]
      };
    });
  },
      peg$c23 = function peg$c23(r) {
    return r;
  },
      peg$c24 = function peg$c24(name, body) {
    var ref = {
      name: name ? name[1] : null,
      endpoints: body.endpoints,
      token: location()
    };
    Object.assign(ref, body.settings);
    return ref;
  },
      peg$c25 = ".",
      peg$c26 = peg$literalExpectation(".", false),
      peg$c27 = function peg$c27(table1, field1, relation, table2, field2, ref_settings) {
    var endpoints = [{
      tableName: table1,
      fieldNames: field1,
      relation: relation === ">" ? "*" : "1",
      token: location()
    }, {
      tableName: table2,
      fieldNames: field2,
      relation: relation === "<" ? "*" : "1",
      token: location()
    }];
    return {
      endpoints: endpoints,
      settings: ref_settings
    };
  },
      peg$c28 = function peg$c28(field) {
    if (typeof field === "string") field = [field];
    return field;
  },
      peg$c29 = function peg$c29(field) {
    return field;
  },
      peg$c30 = "(",
      peg$c31 = peg$literalExpectation("(", false),
      peg$c32 = ")",
      peg$c33 = peg$literalExpectation(")", false),
      peg$c34 = function peg$c34(first, rest) {
    var arrField = [first].concat(rest.map(function (el) {
      return el[3];
    }));
    return arrField;
  },
      peg$c35 = "[",
      peg$c36 = peg$literalExpectation("[", false),
      peg$c37 = "]",
      peg$c38 = peg$literalExpectation("]", false),
      peg$c39 = function peg$c39(first, rest) {
    var arrSettings = [first].concat(rest.map(function (el) {
      return el[1];
    }));
    var res = {};
    arrSettings.forEach(function (ele) {
      if (ele.type === "update") {
        res.onUpdate = ele.value;
      }

      if (ele.type === "delete") {
        res.onDelete = ele.value;
      }
    });
    return res;
  },
      peg$c40 = function peg$c40(v) {
    return {
      type: 'update',
      value: v
    };
  },
      peg$c41 = function peg$c41(v) {
    return {
      type: 'delete',
      value: v
    };
  },
      peg$c42 = "update:",
      peg$c43 = peg$literalExpectation("update:", true),
      peg$c44 = function peg$c44(val) {
    return val;
  },
      peg$c45 = "delete:",
      peg$c46 = peg$literalExpectation("delete:", true),
      peg$c47 = function peg$c47(name, alias, table_settings, body) {
    var fields = body.fields || [];
    var indexes = body.indexes || []; // Handle list of partial inline_refs

    var refs = [];
    fields.forEach(function (field) {
      (field.inline_refs || []).forEach(function (iref) {
        var endpoints = [{
          tableName: iref.tableName,
          fieldNames: iref.fieldNames,
          relation: iref.relation === "<" ? "*" : "1",
          token: iref.token
        }, {
          tableName: name,
          fieldNames: [field.name],
          relation: iref.relation === ">" ? "*" : "1",
          token: iref.token
        }];
        var ref = {
          name: null,
          // no name
          endpoints: endpoints,
          token: iref.token
        };
        data.refs.push(ref);
      });
    });

    var res = _objectSpread({
      name: name,
      alias: alias,
      fields: fields,
      token: location(),
      indexes: indexes
    }, table_settings);

    if (body.note) {
      res = _objectSpread({}, res, {
        note: body.note
      });
    }

    return res;
  },
      peg$c48 = function peg$c48(fields, elements) {
    // concat all indexes
    var indexes = _.flatMap(elements.filter(function (ele) {
      return ele.type === 'indexes';
    }), function (ele) {
      return ele.value;
    }); // pick the last note


    var note = elements.slice().reverse().find(function (ele) {
      return ele.type === 'note';
    }); // process field for composite primary key:

    var primaryKeyList = [];
    fields.forEach(function (field) {
      if (field.pk) {
        primaryKeyList.push(field);
      }
    });

    if (primaryKeyList.length > 1) {
      var columns = primaryKeyList.map(function (field) {
        return {
          value: field.name,
          type: 'column'
        };
      }); // remove property `pk` for each field in this list

      primaryKeyList.forEach(function (field) {
        return delete field.pk;
      });
      indexes.push({
        columns: columns,
        token: _.head(primaryKeyList).token,
        pk: true
      });
    }

    return {
      fields: fields,
      indexes: indexes,
      note: note ? note.value : null
    };
  },
      peg$c49 = function peg$c49(indexes) {
    return {
      type: 'indexes',
      value: indexes
    };
  },
      peg$c50 = function peg$c50(name, type, constrains, field_settings) {
    var field = {
      name: name,
      type: type,
      token: location(),
      inline_refs: []
    };
    Object.assign.apply(Object, [field].concat(_toConsumableArray(constrains.map(function (c) {
      return c[1];
    }))));

    if (field_settings) {
      Object.assign(field, field_settings[1]);
    }

    return field;
  },
      peg$c51 = function peg$c51(name, body) {
    return {
      name: name,
      token: location(),
      values: body.enum_values
    };
  },
      peg$c52 = function peg$c52(enum_values) {
    return {
      enum_values: enum_values
    };
  },
      peg$c53 = function peg$c53(name, enum_setting) {
    var enum_value = {
      name: name,
      token: location()
    };
    Object.assign(enum_value, enum_setting);
    return enum_value;
  },
      peg$c54 = function peg$c54(v) {
    return {
      note: v
    };
  },
      peg$c55 = function peg$c55(first, rest) {
    var arrSettings = [first].concat(rest.map(function (el) {
      return el[1];
    }));
    var res = {
      inline_refs: []
    };
    arrSettings.forEach(function (ele) {
      if (typeof ele === 'string') {
        if (ele.toLowerCase() == "not null") {
          res.not_null = true;
        }

        if (ele.toLowerCase() == "null") {
          res.not_null = false;
        }

        if (ele.toLowerCase() == "primary key" || ele.toLowerCase() == 'pk') {
          res.pk = true;
        }

        if (ele.toLowerCase() == "unique") {
          res.unique = true;
        }

        if (ele.toLowerCase() == "increment") {
          res.increment = true;
        }
      } else {
        if (ele.type === "note") {
          res.note = ele.value;
        }

        if (ele.type === "ref_inline") {
          res.inline_refs.push(ele.value);
        }

        if (ele.type === "default") {
          res.dbdefault = ele.value;
        }
      }
    });
    return res;
  },
      peg$c56 = function peg$c56(first, rest) {
    var settings = [first].concat(_toConsumableArray(rest.map(function (el) {
      return el[1];
    })));
    var result = {};
    settings.forEach(function (el) {
      if (typeof el === 'string') {
        if (el.startsWith('#')) {
          result.headerColor = el.toUpperCase();
        }
      } else {
        if (el.type === "note") {
          result.note = el.value;
        }
      }
    });
    return result;
  },
      peg$c57 = function peg$c57(v) {
    return {
      type: 'note',
      value: v
    };
  },
      peg$c58 = function peg$c58(c) {
    return c;
  },
      peg$c59 = "not null",
      peg$c60 = peg$literalExpectation("not null", true),
      peg$c61 = function peg$c61(a) {
    return a;
  },
      peg$c62 = "null",
      peg$c63 = peg$literalExpectation("null", true),
      peg$c64 = "primary key",
      peg$c65 = peg$literalExpectation("primary key", true),
      peg$c66 = "pk",
      peg$c67 = peg$literalExpectation("pk", true),
      peg$c68 = "unique",
      peg$c69 = peg$literalExpectation("unique", true),
      peg$c70 = "increment",
      peg$c71 = peg$literalExpectation("increment", false),
      peg$c72 = function peg$c72(v) {
    return {
      type: 'ref_inline',
      value: v
    };
  },
      peg$c73 = function peg$c73(v) {
    return {
      type: 'default',
      value: v
    };
  },
      peg$c74 = function peg$c74(body) {
    return body;
  },
      peg$c75 = function peg$c75(index) {
    return index;
  },
      peg$c76 = function peg$c76(index) {
    return index;
  },
      peg$c77 = function peg$c77(syntax, index_settings) {
    var index = {
      columns: [syntax],
      token: location()
    };
    Object.assign(index, index_settings);
    return index;
  },
      peg$c78 = function peg$c78(syntax, index_settings) {
    var index = {
      columns: syntax,
      token: location()
    };
    Object.assign(index, index_settings);
    return index;
  },
      peg$c79 = function peg$c79(column) {
    var singleIndex = {
      value: column,
      type: 'column'
    };
    return singleIndex;
  },
      peg$c80 = "`",
      peg$c81 = peg$literalExpectation("`", false),
      peg$c82 = /^[^`]/,
      peg$c83 = peg$classExpectation(["`"], true, false),
      peg$c84 = function peg$c84(text) {
    return {
      value: text.join(""),
      type: 'expression'
    };
  },
      peg$c85 = function peg$c85(first, rest) {
    var arrIndex = [first].concat(rest.map(function (el) {
      return el[2];
    }));
    return arrIndex;
  },
      peg$c86 = function peg$c86() {
    return {
      pk: true
    };
  },
      peg$c87 = function peg$c87(first, rest) {
    var arrSettings = [first].concat(rest.map(function (el) {
      return el[1];
    }));
    var res = {};
    arrSettings.forEach(function (ele) {
      if (typeof ele === 'string') {
        res[ele.toLowerCase()] = true;
      } else {
        res[ele.type] = ele.value;
      }
    });
    return res;
  },
      peg$c88 = function peg$c88(v) {
    return {
      type: 'name',
      value: v
    };
  },
      peg$c89 = function peg$c89(v) {
    return {
      type: 'type',
      value: v
    };
  },
      peg$c90 = "name:",
      peg$c91 = peg$literalExpectation("name:", true),
      peg$c92 = function peg$c92(val) {
    return val.value;
  },
      peg$c93 = function peg$c93(note) {
    return note;
  },
      peg$c94 = "note",
      peg$c95 = peg$literalExpectation("note", true),
      peg$c96 = "note:",
      peg$c97 = peg$literalExpectation("note:", true),
      peg$c98 = "type:",
      peg$c99 = peg$literalExpectation("type:", true),
      peg$c100 = "ref:",
      peg$c101 = peg$literalExpectation("ref:", false),
      peg$c102 = function peg$c102(relation, table2, field2) {
    return {
      tableName: table2,
      fieldNames: [field2],
      relation: relation,
      token: location()
    };
  },
      peg$c103 = "default:",
      peg$c104 = peg$literalExpectation("default:", true),
      peg$c105 = function peg$c105(val) {
    return val;
  },
      peg$c106 = "as",
      peg$c107 = peg$literalExpectation("as", false),
      peg$c108 = function peg$c108(alias) {
    return alias;
  },
      peg$c109 = function peg$c109(s, color) {
    return s + color.join('');
  },
      peg$c110 = peg$otherExpectation("project"),
      peg$c111 = "project",
      peg$c112 = peg$literalExpectation("project", true),
      peg$c113 = peg$otherExpectation("table"),
      peg$c114 = "table",
      peg$c115 = peg$literalExpectation("table", true),
      peg$c116 = peg$literalExpectation("as", true),
      peg$c117 = peg$otherExpectation("references"),
      peg$c118 = "ref",
      peg$c119 = peg$literalExpectation("ref", true),
      peg$c120 = peg$otherExpectation("unique"),
      peg$c121 = function peg$c121() {
    return {
      unique: true
    };
  },
      peg$c122 = peg$otherExpectation("PK"),
      peg$c123 = function peg$c123() {
    return {
      pk: true
    };
  },
      peg$c124 = peg$otherExpectation("indexes"),
      peg$c125 = "indexes",
      peg$c126 = peg$literalExpectation("indexes", true),
      peg$c127 = peg$otherExpectation("btree"),
      peg$c128 = "btree",
      peg$c129 = peg$literalExpectation("btree", true),
      peg$c130 = peg$otherExpectation("hash"),
      peg$c131 = "hash",
      peg$c132 = peg$literalExpectation("hash", true),
      peg$c133 = peg$otherExpectation("enum"),
      peg$c134 = "enum",
      peg$c135 = peg$literalExpectation("enum", true),
      peg$c136 = "headercolor",
      peg$c137 = peg$literalExpectation("headercolor", true),
      peg$c138 = peg$otherExpectation("Table Group"),
      peg$c139 = "tablegroup",
      peg$c140 = peg$literalExpectation("TableGroup", true),
      peg$c141 = peg$otherExpectation("no action"),
      peg$c142 = "no action",
      peg$c143 = peg$literalExpectation("no action", true),
      peg$c144 = peg$otherExpectation("restrict"),
      peg$c145 = "restrict",
      peg$c146 = peg$literalExpectation("restrict", true),
      peg$c147 = peg$otherExpectation("cascade"),
      peg$c148 = "cascade",
      peg$c149 = peg$literalExpectation("cascade", true),
      peg$c150 = peg$otherExpectation("set null"),
      peg$c151 = "set null",
      peg$c152 = peg$literalExpectation("set null", true),
      peg$c153 = peg$otherExpectation("set default"),
      peg$c154 = "set default",
      peg$c155 = peg$literalExpectation("set default", true),
      peg$c156 = peg$otherExpectation(">, - or <"),
      peg$c157 = /^[>\-<]/,
      peg$c158 = peg$classExpectation([">", "-", "<"], false, false),
      peg$c159 = peg$otherExpectation("valid name"),
      peg$c160 = function peg$c160(c) {
    return c.join("");
  },
      peg$c161 = /^[^"\n]/,
      peg$c162 = peg$classExpectation(["\"", "\n"], true, false),
      peg$c163 = peg$otherExpectation("type"),
      peg$c164 = function peg$c164(type_name, args) {
    args = args ? args[3] : null;

    if (type_name.toLowerCase() !== 'enum') {
      type_name = args ? type_name + '(' + args + ')' : type_name;
    }

    return {
      type_name: type_name,
      args: args
    };
  },
      peg$c165 = peg$otherExpectation("expression"),
      peg$c166 = function peg$c166(factors) {
    return _.flattenDeep(factors).join("");
  },
      peg$c167 = ",",
      peg$c168 = peg$literalExpectation(",", false),
      peg$c169 = ");",
      peg$c170 = peg$literalExpectation(");", false),
      peg$c171 = peg$anyExpectation(),
      peg$c172 = function peg$c172(factors) {
    return _.flattenDeep(factors).join("");
  },
      peg$c173 = /^[',.a-z0-9_+-`]/i,
      peg$c174 = peg$classExpectation(["'", ",", ".", ["a", "z"], ["0", "9"], "_", ["+", "`"]], false, true),
      peg$c175 = /^['.a-z0-9_+\-]/i,
      peg$c176 = peg$classExpectation(["'", ".", ["a", "z"], ["0", "9"], "_", "+", "-"], false, true),
      peg$c177 = function peg$c177() {
    return text();
  },
      peg$c178 = /^[[\]]/,
      peg$c179 = peg$classExpectation(["[", "]"], false, false),
      peg$c180 = peg$otherExpectation("letter, number or underscore"),
      peg$c181 = /^[a-z0-9_]/i,
      peg$c182 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], false, true),
      peg$c183 = /^[0-9a-fA-F]/,
      peg$c184 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
      peg$c185 = function peg$c185(c) {
    return c.toLowerCase();
  },
      peg$c186 = "\"",
      peg$c187 = peg$literalExpectation("\"", false),
      peg$c188 = peg$otherExpectation("endline"),
      peg$c189 = "\t",
      peg$c190 = peg$literalExpectation("\t", false),
      peg$c191 = peg$otherExpectation("comment"),
      peg$c192 = "//",
      peg$c193 = peg$literalExpectation("//", false),
      peg$c194 = /^[^\n]/,
      peg$c195 = peg$classExpectation(["\n"], true, false),
      peg$c196 = peg$otherExpectation("newline"),
      peg$c197 = "\r\n",
      peg$c198 = peg$literalExpectation("\r\n", false),
      peg$c199 = "\n",
      peg$c200 = peg$literalExpectation("\n", false),
      peg$c201 = peg$otherExpectation("whitespace"),
      peg$c202 = /^[ \t\r\n\r]/,
      peg$c203 = peg$classExpectation([" ", "\t", "\r", "\n", "\r"], false, false),
      peg$c204 = /^[ \t\r\n\r"]/,
      peg$c205 = peg$classExpectation([" ", "\t", "\r", "\n", "\r", "\""], false, false),
      peg$c206 = " ",
      peg$c207 = peg$literalExpectation(" ", false),
      peg$c208 = "#",
      peg$c209 = peg$literalExpectation("#", false),
      peg$c210 = function peg$c210() {
    return "#";
  },
      peg$c211 = peg$otherExpectation("string"),
      peg$c212 = function peg$c212(chars) {
    return {
      value: chars.join(''),
      type: 'string'
    };
  },
      peg$c213 = "'''",
      peg$c214 = peg$literalExpectation("'''", false),
      peg$c215 = function peg$c215(chars) {
    var str = chars.join(''); // // replace line continuation using look around, but this is not compatible with firefox, safari.
    // str = str.replace(/(?<!\\)\\(?!\\)(?:\n|\r\n)?/g, ''); 
    // str = str.replace(/\\\\/, '\\');

    var lines = str.split(/\n|\r\n?/);

    var leadingSpaces = function leadingSpaces(str) {
      var i = 0;

      while (i < str.length && str[i] === ' ') {
        i += 1;
      }

      return i;
    };

    var minLeadingSpaces = lines.filter(function (line) {
      return line.replace(/\s+/g, '');
    }).reduce(function (acc, cur) {
      return Math.min(acc, leadingSpaces(cur));
    }, Number.MAX_SAFE_INTEGER);
    lines = lines.map(function (line) {
      return line ? line.slice(minLeadingSpaces) : line;
    });

    var countLeadingEmptyLine = function countLeadingEmptyLine(lines) {
      var i = 0;

      while (i < lines.length && !lines[i].replace(/\s+/g, '')) {
        i += 1;
      }

      return i;
    };

    lines.splice(0, countLeadingEmptyLine(lines));
    lines.splice(lines.length - countLeadingEmptyLine(lines.slice().reverse()));
    var finalStr = lines.join('\n');
    return {
      value: finalStr,
      type: 'string'
    };
  },
      peg$c216 = "'",
      peg$c217 = peg$literalExpectation("'", false),
      peg$c218 = "\\",
      peg$c219 = peg$literalExpectation("\\", false),
      peg$c220 = function peg$c220() {
    return '"';
  },
      peg$c221 = function peg$c221() {
    return text();
  },
      peg$c222 = "\\'",
      peg$c223 = peg$literalExpectation("\\'", false),
      peg$c224 = function peg$c224() {
    return "'";
  },
      peg$c225 = function peg$c225(bl) {
    // escape character \. \\n => \n. Remove one backslash in the result string.
    return bl.join('');
  },
      peg$c226 = function peg$c226() {
    // replace line continuation
    return '';
  },
      peg$c227 = /^[0-9]/,
      peg$c228 = peg$classExpectation([["0", "9"]], false, false),
      peg$c229 = "=",
      peg$c230 = peg$literalExpectation("=", false),
      peg$c231 = "true",
      peg$c232 = peg$literalExpectation("true", true),
      peg$c233 = "false",
      peg$c234 = peg$literalExpectation("false", true),
      peg$c235 = function peg$c235(_boolean) {
    return {
      type: 'boolean',
      value: _boolean
    };
  },
      peg$c236 = function peg$c236(number) {
    return {
      type: 'number',
      value: number
    };
  },
      peg$c237 = function peg$c237(left, right) {
    return parseFloat(left.join("") + "." + right.join(""));
  },
      peg$c238 = function peg$c238(digits) {
    return parseInt(digits.join(""), 10);
  },
      peg$currPos = 0,
      peg$savedPos = 0,
      peg$posDetailsCache = [{
    line: 1,
    column: 1
  }],
      peg$maxFailPos = 0,
      peg$maxFailExpected = [],
      peg$silentFails = 0,
      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return {
      type: "literal",
      text: text,
      ignoreCase: ignoreCase
    };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return {
      type: "class",
      parts: parts,
      inverted: inverted,
      ignoreCase: ignoreCase
    };
  }

  function peg$anyExpectation() {
    return {
      type: "any"
    };
  }

  function peg$endExpectation() {
    return {
      type: "end"
    };
  }

  function peg$otherExpectation(description) {
    return {
      type: "other",
      description: description
    };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos],
        p;

    if (details) {
      return details;
    } else {
      p = pos - 1;

      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails = peg$computePosDetails(endPos);
    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
  }

  function peg$parserules() {
    var s0, s1, s2;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseexpr();

    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseexpr();
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0();
    }

    s0 = s1;
    return s0;
  }

  function peg$parseexpr() {
    var s0, s1;
    s0 = peg$currPos;
    s1 = peg$parseTableSyntax();

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }

    s0 = s1;

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRefSyntax();

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
      }

      s0 = s1;

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseEnumSyntax();

        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1);
        }

        s0 = s1;

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTableGroupSyntax();

          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4(s1);
          }

          s0 = s1;

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseProjectSyntax();

            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c5(s1);
            }

            s0 = s1;

            if (s0 === peg$FAILED) {
              s0 = peg$parse__();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseProjectSyntax() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;
    s0 = peg$currPos;
    s1 = peg$parseproject();

    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();

      if (s3 !== peg$FAILED) {
        s4 = peg$parsename();

        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }

      if (s2 === peg$FAILED) {
        s2 = null;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c7);
            }
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();

            if (s5 !== peg$FAILED) {
              s6 = peg$parseProjectBody();

              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();

                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c8;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c9);
                    }
                  }

                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c10(s2, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProjectBody() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseProjectElement();

      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseProjectElement();
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProjectElement() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseObjectNoteElement();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c12(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseTableSyntax();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();

        if (s1 !== peg$FAILED) {
          s2 = peg$parseRefSyntax();

          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c14(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();

          if (s1 !== peg$FAILED) {
            s2 = peg$parseEnumSyntax();

            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();

              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTableGroupSyntax();

            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();

              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c16(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }

            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();

              if (s1 !== peg$FAILED) {
                s2 = peg$parseProjectField();

                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();

                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c17(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseProjectField() {
    var s0, s1, s2, s3, s4, s5;
    s0 = peg$currPos;
    s1 = peg$parsename();

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c18;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c19);
          }
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            s5 = peg$parseStringLiteral();

            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTableGroupSyntax() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
    s0 = peg$currPos;
    s1 = peg$parsetable_group();

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesp();

      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesp();
        }
      } else {
        s2 = peg$FAILED;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsename();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c6;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c7);
              }
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();

              if (s6 !== peg$FAILED) {
                s7 = peg$parsetable_group_body();

                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();

                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s9 = peg$c8;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c9);
                      }
                    }

                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c21(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetable_group_body() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsename();

    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();

      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }

    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parsename();

      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();

        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c22(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parseRefSyntax() {
    var s0, s1;
    s0 = peg$currPos;
    s1 = peg$parseref_long();

    if (s1 === peg$FAILED) {
      s1 = peg$parseref_short();
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c23(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parseref_long() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;
    s0 = peg$currPos;
    s1 = peg$parseref();

    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();

      if (s3 !== peg$FAILED) {
        s4 = peg$parsename();

        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }

      if (s2 === peg$FAILED) {
        s2 = null;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c7);
            }
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();

            if (s5 !== peg$FAILED) {
              s6 = peg$parseref_body();

              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();

                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c8;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c9);
                    }
                  }

                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c24(s2, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseref_short() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;
    s1 = peg$parseref();

    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsesp();

      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsesp();
        }
      } else {
        s3 = peg$FAILED;
      }

      if (s3 !== peg$FAILED) {
        s4 = peg$parsename();

        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }

      if (s2 === peg$FAILED) {
        s2 = null;
      }

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsesp();

        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsesp();
        }

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c18;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c19);
            }
          }

          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsesp();

            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsesp();
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parseref_body();

              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s2, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseref_body() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
    s0 = peg$currPos;
    s1 = peg$parsename();

    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c26);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parseRefField();

        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsesp();

          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsesp();
            }
          } else {
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parserelation();

            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsesp();

              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsesp();
                }
              } else {
                s6 = peg$FAILED;
              }

              if (s6 !== peg$FAILED) {
                s7 = peg$parsename();

                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s8 = peg$c25;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c26);
                    }
                  }

                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseRefField();

                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parsesp();

                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parsesp();
                      }

                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseRefSettings();

                        if (s11 === peg$FAILED) {
                          s11 = null;
                        }

                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c27(s1, s3, s5, s7, s9, s11);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRefField() {
    var s0, s1;
    s0 = peg$currPos;
    s1 = peg$parseRefSingleField();

    if (s1 === peg$FAILED) {
      s1 = peg$parseRefMultipleFields();
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c28(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parseRefSingleField() {
    var s0, s1;
    s0 = peg$currPos;
    s1 = peg$parsename();

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c29(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parseRefMultipleFields() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c31);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesp();

      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesp();
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parseRefSingleField();

        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parsesp();

          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parsesp();
          }

          if (s6 !== peg$FAILED) {
            s7 = peg$parseComma();

            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parsesp();

              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parsesp();
              }

              if (s8 !== peg$FAILED) {
                s9 = peg$parseRefSingleField();

                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }

          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parsesp();

            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsesp();
            }

            if (s6 !== peg$FAILED) {
              s7 = peg$parseComma();

              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parsesp();

                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parsesp();
                }

                if (s8 !== peg$FAILED) {
                  s9 = peg$parseRefSingleField();

                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }

          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsesp();

            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsesp();
            }

            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c32;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c33);
                }
              }

              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c34(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRefSettings() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c36);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parseRefSetting();

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseComma();

        if (s5 !== peg$FAILED) {
          s6 = peg$parseRefSetting();

          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseComma();

          if (s5 !== peg$FAILED) {
            s6 = peg$parseRefSetting();

            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c37;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c38);
            }
          }

          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c39(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRefSetting() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseOnUpdate();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseOnDelete();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c41(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseOnUpdate() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c42) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c43);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseno_action();

        if (s3 === peg$FAILED) {
          s3 = peg$parserestrict();

          if (s3 === peg$FAILED) {
            s3 = peg$parsecascade();

            if (s3 === peg$FAILED) {
              s3 = peg$parseset_null();

              if (s3 === peg$FAILED) {
                s3 = peg$parseset_default();
              }
            }
          }
        }

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOnDelete() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c45) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c46);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseno_action();

        if (s3 === peg$FAILED) {
          s3 = peg$parserestrict();

          if (s3 === peg$FAILED) {
            s3 = peg$parsecascade();

            if (s3 === peg$FAILED) {
              s3 = peg$parseset_null();

              if (s3 === peg$FAILED) {
                s3 = peg$parseset_default();
              }
            }
          }
        }

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTableSyntax() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
    s0 = peg$currPos;
    s1 = peg$parsetable();

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesp();

      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesp();
        }
      } else {
        s2 = peg$FAILED;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsename();

        if (s3 !== peg$FAILED) {
          s4 = peg$parsealias_def();

          if (s4 === peg$FAILED) {
            s4 = null;
          }

          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsesp();

            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsesp();
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parseTableSettings();

              if (s6 === peg$FAILED) {
                s6 = null;
              }

              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();

                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s8 = peg$c6;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c7);
                    }
                  }

                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseTableBody();

                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s10 = peg$c8;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;

                        if (peg$silentFails === 0) {
                          peg$fail(peg$c9);
                        }
                      }

                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c47(s3, s4, s6, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTableBody() {
    var s0, s1, s2, s3, s4, s5;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseField();

      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseField();
        }
      } else {
        s2 = peg$FAILED;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseTableElement();

          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseTableElement();
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();

            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c48(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTableElement() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseIndexes();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c49(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseObjectNoteElement();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c12(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseField() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parsename();

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsesp();

        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsesp();
          }
        } else {
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parsetype();

          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = [];
            s8 = peg$parsesp();

            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsesp();
              }
            } else {
              s7 = peg$FAILED;
            }

            if (s7 !== peg$FAILED) {
              s8 = peg$parseconstrain();

              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }

            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parsesp();

              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsesp();
                }
              } else {
                s7 = peg$FAILED;
              }

              if (s7 !== peg$FAILED) {
                s8 = peg$parseconstrain();

                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parsesp();

              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsesp();
                }
              } else {
                s7 = peg$FAILED;
              }

              if (s7 !== peg$FAILED) {
                s8 = peg$parseFieldSettings();

                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }

              if (s6 === peg$FAILED) {
                s6 = null;
              }

              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parsesp();

                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsesp();
                }

                if (s7 !== peg$FAILED) {
                  s8 = peg$parsecomment();

                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }

                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsenewline();

                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c50(s2, s4, s5, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumSyntax() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    s1 = peg$parseenum();

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesp();

      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesp();
        }
      } else {
        s2 = peg$FAILED;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsename();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c6;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c7);
              }
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parseEnumBody();

              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c8;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                  }
                }

                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c51(s3, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumBody() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseEnumValue();

      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEnumValue();
        }
      } else {
        s2 = peg$FAILED;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c52(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumValue() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parsename();

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsesp();

        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsesp();
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parseEnumSetting();

          if (s4 === peg$FAILED) {
            s4 = null;
          }

          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsesp();

            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsesp();
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parsecomment();

              if (s6 === peg$FAILED) {
                s6 = null;
              }

              if (s6 !== peg$FAILED) {
                s7 = peg$parsenewline();

                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c53(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumSetting() {
    var s0, s1, s2, s3, s4, s5;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c36);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseObjectNote();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c37;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c38);
              }
            }

            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c54(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFieldSettings() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c36);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parseFieldSetting();

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseComma();

        if (s5 !== peg$FAILED) {
          s6 = peg$parseFieldSetting();

          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseComma();

          if (s5 !== peg$FAILED) {
            s6 = peg$parseFieldSetting();

            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c37;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c38);
            }
          }

          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c55(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTableSettings() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c36);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parseTableSetting();

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseComma();

        if (s5 !== peg$FAILED) {
          s6 = peg$parseTableSetting();

          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseComma();

          if (s5 !== peg$FAILED) {
            s6 = peg$parseTableSetting();

            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c37;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c38);
            }
          }

          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c56(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTableSetting() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseObjectNote();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c57(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseHeaderColor();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c58(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseFieldSetting() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c59) {
        s2 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c60);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c61(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();

      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c62) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c63);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c61(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();

        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c64) {
            s2 = input.substr(peg$currPos, 11);
            peg$currPos += 11;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }

          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c61(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();

          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c66) {
              s2 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c67);
              }
            }

            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();

              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c61(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();

            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c68) {
                s2 = input.substr(peg$currPos, 6);
                peg$currPos += 6;
              } else {
                s2 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c69);
                }
              }

              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();

                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c61(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }

            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();

              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c70) {
                  s2 = peg$c70;
                  peg$currPos += 9;
                } else {
                  s2 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c71);
                  }
                }

                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();

                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }

              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();

                if (s1 !== peg$FAILED) {
                  s2 = peg$parseObjectNote();

                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();

                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c57(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }

                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parse_();

                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseRefInline();

                    if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c72(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }

                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_();

                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseDefault();

                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();

                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c73(s2);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseIndexes() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseindexes();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c7);
            }
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parseIndexesBody();

            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s6 = peg$c8;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c9);
                }
              }

              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c74(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIndexesBody() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseIndex();

      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseIndex();
        }
      } else {
        s2 = peg$FAILED;
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c75(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIndex() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseSingleIndexSyntax();

      if (s2 === peg$FAILED) {
        s2 = peg$parseCompositeIndexSyntax();
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c76(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingleIndexSyntax() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseSingleIndex();

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsesp();

        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsesp();
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parseIndexSettings();

          if (s4 === peg$FAILED) {
            s4 = null;
          }

          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c77(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCompositeIndexSyntax() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseCompositeIndex();

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsesp();

        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsesp();
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parseIndexSettings();

          if (s4 === peg$FAILED) {
            s4 = null;
          }

          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c78(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingleIndex() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parsename();

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesp();

      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesp();
      }

      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c79(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$parseExpression();
    }

    return s0;
  }

  function peg$parseExpression() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 96) {
      s1 = peg$c80;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c81);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = [];

      if (peg$c82.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c83);
        }
      }

      while (s3 !== peg$FAILED) {
        s2.push(s3);

        if (peg$c82.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c83);
          }
        }
      }

      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 96) {
          s3 = peg$c80;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c81);
          }
        }

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c84(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCompositeIndex() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c31);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesp();

      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesp();
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parseSingleIndex();

        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseComma();

          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parsesp();

            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parsesp();
            }

            if (s7 !== peg$FAILED) {
              s8 = peg$parseSingleIndex();

              if (s8 !== peg$FAILED) {
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }

          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseComma();

            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parsesp();

              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsesp();
              }

              if (s7 !== peg$FAILED) {
                s8 = peg$parseSingleIndex();

                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c32;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c33);
              }
            }

            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c85(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIndexSettings() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c36);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesp();

      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesp();
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parsepk();

        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsesp();

          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsesp();
          }

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c37;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c38);
              }
            }

            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c86();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c35;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseIndexSetting();

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseComma();

          if (s5 !== peg$FAILED) {
            s6 = peg$parseIndexSetting();

            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseComma();

            if (s5 !== peg$FAILED) {
              s6 = peg$parseIndexSetting();

              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }

          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c37;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c38);
              }
            }

            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c87(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseIndexSetting() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c68) {
        s2 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c69);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c61(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseIndexName();

        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c88(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();

        if (s1 !== peg$FAILED) {
          s2 = peg$parseIndexType();

          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c89(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();

          if (s1 !== peg$FAILED) {
            s2 = peg$parseObjectNote();

            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();

              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c57(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseIndexName() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c90) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c91);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseStringLiteral();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c92(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectNoteElement() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    s1 = peg$parseObjectNote();

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c93(s1);
    }

    s0 = s1;

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c94) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c95);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c6;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c7);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();

            if (s4 !== peg$FAILED) {
              s5 = peg$parseStringLiteral();

              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();

                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s7 = peg$c8;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c9);
                    }
                  }

                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c92(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseObjectNote() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c96) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c97);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseStringLiteral();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c92(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIndexType() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c98) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c99);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parsebtree();

        if (s3 === peg$FAILED) {
          s3 = peg$parsehash();
        }

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRefInline() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 4) === peg$c100) {
      s1 = peg$c100;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c101);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesp();

      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesp();
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parserelation();

        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsesp();

          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsesp();
            }
          } else {
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parsename();

            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s6 = peg$c25;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c26);
                }
              }

              if (s6 !== peg$FAILED) {
                s7 = peg$parsename();

                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c102(s3, s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDefault() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c103) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c104);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseDefaultVal();

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c105(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDefaultVal() {
    var s0;
    s0 = peg$parseStringLiteral();

    if (s0 === peg$FAILED) {
      s0 = peg$parseExpression();

      if (s0 === peg$FAILED) {
        s0 = peg$parseBooleanLiteral();

        if (s0 === peg$FAILED) {
          s0 = peg$parseNumberLiteral();
        }
      }
    }

    return s0;
  }

  function peg$parsealias_def() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsesp();

    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsesp();
      }
    } else {
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c106) {
        s2 = peg$c106;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c107);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsesp();

        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsesp();
          }
        } else {
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parsename();

          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c108(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHeaderColor() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseheader_color();

      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c18;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c19);
          }
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            s5 = peg$parsesharp();

            if (s5 !== peg$FAILED) {
              s6 = peg$parsehex_color();

              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();

                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c109(s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehex_color() {
    var s0;
    s0 = peg$parsesix_char();

    if (s0 === peg$FAILED) {
      s0 = peg$parsethree_char();
    }

    return s0;
  }

  function peg$parsethree_char() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$parsehex_char();

    if (s1 !== peg$FAILED) {
      s2 = peg$parsehex_char();

      if (s2 !== peg$FAILED) {
        s3 = peg$parsehex_char();

        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesix_char() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;
    s1 = peg$parsehex_char();

    if (s1 !== peg$FAILED) {
      s2 = peg$parsehex_char();

      if (s2 !== peg$FAILED) {
        s3 = peg$parsehex_char();

        if (s3 !== peg$FAILED) {
          s4 = peg$parsehex_char();

          if (s4 !== peg$FAILED) {
            s5 = peg$parsehex_char();

            if (s5 !== peg$FAILED) {
              s6 = peg$parsehex_char();

              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconstrain() {
    var s0;
    s0 = peg$parseunique();

    if (s0 === peg$FAILED) {
      s0 = peg$parsepk();
    }

    return s0;
  }

  function peg$parseproject() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c111) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c112);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c110);
      }
    }

    return s0;
  }

  function peg$parsetable() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c114) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c115);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c113);
      }
    }

    return s0;
  }

  function peg$parseas() {
    var s0;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c106) {
      s0 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c116);
      }
    }

    return s0;
  }

  function peg$parseref() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c118) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c119);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c117);
      }
    }

    return s0;
  }

  function peg$parseunique() {
    var s0, s1;
    peg$silentFails++;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c68) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c69);
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c121();
    }

    s0 = s1;
    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c120);
      }
    }

    return s0;
  }

  function peg$parsepk() {
    var s0, s1;
    peg$silentFails++;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c66) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c67);
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c123();
    }

    s0 = s1;
    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c122);
      }
    }

    return s0;
  }

  function peg$parseindexes() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c125) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c126);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c124);
      }
    }

    return s0;
  }

  function peg$parsebtree() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c128) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c129);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c127);
      }
    }

    return s0;
  }

  function peg$parsehash() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c131) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c132);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c130);
      }
    }

    return s0;
  }

  function peg$parseenum() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c134) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c135);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c133);
      }
    }

    return s0;
  }

  function peg$parseheader_color() {
    var s0;

    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c136) {
      s0 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c137);
      }
    }

    return s0;
  }

  function peg$parsetable_group() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c139) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c140);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c138);
      }
    }

    return s0;
  }

  function peg$parseno_action() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c142) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c143);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c141);
      }
    }

    return s0;
  }

  function peg$parserestrict() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c145) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c146);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c144);
      }
    }

    return s0;
  }

  function peg$parsecascade() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c148) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c149);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c147);
      }
    }

    return s0;
  }

  function peg$parseset_null() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c151) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c152);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c150);
      }
    }

    return s0;
  }

  function peg$parseset_default() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c154) {
      s0 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c155);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c153);
      }
    }

    return s0;
  }

  function peg$parserelation() {
    var s0, s1;
    peg$silentFails++;

    if (peg$c157.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c158);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c156);
      }
    }

    return s0;
  }

  function peg$parsename() {
    var s0, s1, s2, s3;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecharacter();

    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecharacter();
      }
    } else {
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c160(s1);
    }

    s0 = s1;

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsequote();

      if (s1 !== peg$FAILED) {
        s2 = [];

        if (peg$c161.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c162);
          }
        }

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);

            if (peg$c161.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c162);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parsequote();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c160(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c159);
      }
    }

    return s0;
  }

  function peg$parsetype_name() {
    var s0, s1, s2, s3;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetype_character();

    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsetype_character();
      }
    } else {
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c160(s1);
    }

    s0 = s1;

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsequote();

      if (s1 !== peg$FAILED) {
        s2 = [];

        if (peg$c161.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c162);
          }
        }

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);

            if (peg$c161.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c162);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parsequote();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c160(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c159);
      }
    }

    return s0;
  }

  function peg$parsetype() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetype_name();

    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsesp();

      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsesp();
      }

      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c30;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c31);
          }
        }

        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsesp();

          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsesp();
          }

          if (s5 !== peg$FAILED) {
            s6 = peg$parseexpression();

            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parsesp();

              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsesp();
              }

              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s8 = peg$c32;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c33);
                  }
                }

                if (s8 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7, s8];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }

      if (s2 === peg$FAILED) {
        s2 = null;
      }

      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c164(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c163);
      }
    }

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1, s2;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsefactor();

    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsefactor();
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c166(s1);
    }

    s0 = s1;
    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c165);
      }
    }

    return s0;
  }

  function peg$parsefactor() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsecharacter();

    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsecharacter();
      }
    } else {
      s2 = peg$FAILED;
    }

    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsesp();

      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsesp();
      }

      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c30;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c31);
          }
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpression();

          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s6 = peg$c32;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c33);
              }
            }

            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }

    if (s1 === peg$FAILED) {
      s1 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c30;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c31);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c32;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c33);
            }
          }

          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parseexprCharNoCommaSpace();

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseexprCharNoCommaSpace();
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = [];
          s5 = peg$parsesp();

          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsesp();
          }

          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c167;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c168);
              }
            }

            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c169) {
                s4 = peg$c169;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c170);
                }
              }

              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$parseendline();

                if (s5 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c169) {
                    s6 = peg$c169;
                    peg$currPos += 2;
                  } else {
                    s6 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c170);
                    }
                  }

                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
            }
          }

          peg$silentFails--;

          if (s4 !== peg$FAILED) {
            peg$currPos = s3;
            s3 = void 0;
          } else {
            s3 = peg$FAILED;
          }

          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }

        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = [];
          s3 = peg$parseexprChar();

          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseexprChar();
            }
          } else {
            s2 = peg$FAILED;
          }

          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;

            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c171);
              }
            }

            peg$silentFails--;

            if (s4 !== peg$FAILED) {
              peg$currPos = s3;
              s3 = void 0;
            } else {
              s3 = peg$FAILED;
            }

            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c172(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parseexprChar() {
    var s0;

    if (peg$c173.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c174);
      }
    }

    if (s0 === peg$FAILED) {
      s0 = peg$parsesp();

      if (s0 === peg$FAILED) {
        s0 = peg$parsenewline();

        if (s0 === peg$FAILED) {
          s0 = peg$parsetab();
        }
      }
    }

    return s0;
  }

  function peg$parseexprCharNoCommaSpace() {
    var s0;

    if (peg$c175.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c176);
      }
    }

    return s0;
  }

  function peg$parseallowed_chars() {
    var s0, s1, s2;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;

    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c6;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c7);
      }
    }

    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 125) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c9);
        }
      }

      if (s2 === peg$FAILED) {
        s2 = peg$parsewhitespace_quote();
      }
    }

    peg$silentFails--;

    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c171);
        }
      }

      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c177();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetype_character() {
    var s0;
    s0 = peg$parsecharacter();

    if (s0 === peg$FAILED) {
      if (peg$c178.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c179);
        }
      }
    }

    return s0;
  }

  function peg$parsecharacter() {
    var s0, s1;
    peg$silentFails++;

    if (peg$c181.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c182);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c180);
      }
    }

    return s0;
  }

  function peg$parsehex_char() {
    var s0, s1;
    s0 = peg$currPos;

    if (peg$c183.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c184);
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c185(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parsequote() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c186;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c187);
      }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;
    s0 = [];
    s1 = peg$parsecomment();

    if (s1 === peg$FAILED) {
      s1 = peg$parsewhitespace();
    }

    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsecomment();

      if (s1 === peg$FAILED) {
        s1 = peg$parsewhitespace();
      }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;
    s0 = [];
    s1 = peg$parsecomment();

    if (s1 === peg$FAILED) {
      s1 = peg$parsewhitespace();
    }

    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecomment();

        if (s1 === peg$FAILED) {
          s1 = peg$parsewhitespace();
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseendline() {
    var s0, s1, s2;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsesp();

    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsesp();
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parsenewline();

      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c188);
      }
    }

    return s0;
  }

  function peg$parsetab() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c189;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c190);
      }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3;
    peg$silentFails++;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 2) === peg$c192) {
      s1 = peg$c192;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c193);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = [];

      if (peg$c194.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c195);
        }
      }

      while (s3 !== peg$FAILED) {
        s2.push(s3);

        if (peg$c194.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c195);
          }
        }
      }

      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c191);
      }
    }

    return s0;
  }

  function peg$parsenewline() {
    var s0, s1;
    peg$silentFails++;

    if (input.substr(peg$currPos, 2) === peg$c197) {
      s0 = peg$c197;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c198);
      }
    }

    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c199;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c200);
        }
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c196);
      }
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1;
    peg$silentFails++;

    if (peg$c202.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c203);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c201);
      }
    }

    return s0;
  }

  function peg$parsewhitespace_quote() {
    var s0, s1;
    peg$silentFails++;

    if (peg$c204.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c205);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c201);
      }
    }

    return s0;
  }

  function peg$parsesp() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c206;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c207);
      }
    }

    return s0;
  }

  function peg$parseComma() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c167;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c168);
      }
    }

    return s0;
  }

  function peg$parsesharp() {
    var s0, s1;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c208;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c209);
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c210();
    }

    s0 = s1;
    return s0;
  }

  function peg$parseStringLiteral() {
    var s0, s1, s2, s3;
    peg$silentFails++;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c186;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c187);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDoubleStringCharacter();

      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDoubleStringCharacter();
      }

      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c186;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c187);
          }
        }

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c212(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c213) {
        s1 = peg$c213;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c214);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseMultiLineStringCharacter();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseMultiLineStringCharacter();
        }

        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c213) {
            s3 = peg$c213;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c214);
            }
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c215(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c216;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c217);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSingleStringCharacter();

          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSingleStringCharacter();
          }

          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c216;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c217);
              }
            }

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c212(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c211);
      }
    }

    return s0;
  }

  function peg$parseDoubleStringCharacter() {
    var s0, s1, s2;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c218;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c219);
      }
    }

    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c186;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c187);
        }
      }

      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c220();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c186;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c187);
        }
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c221();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSingleStringCharacter() {
    var s0, s1, s2;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 2) === peg$c222) {
      s1 = peg$c222;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c223);
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c224();
    }

    s0 = s1;

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c216;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c217);
        }
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c221();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMultiLineStringCharacter() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 2) === peg$c222) {
      s1 = peg$c222;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c223);
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c224();
    }

    s0 = s1;

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c218;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c219);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];

        if (input.charCodeAt(peg$currPos) === 92) {
          s3 = peg$c218;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c219);
          }
        }

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);

            if (input.charCodeAt(peg$currPos) === 92) {
              s3 = peg$c218;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c219);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c225(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c218;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c219);
          }
        }

        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s2 = peg$c199;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c200);
            }
          }

          if (s2 === peg$FAILED) {
            s2 = null;
          }

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c226();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          peg$silentFails++;

          if (input.substr(peg$currPos, 3) === peg$c213) {
            s2 = peg$c213;
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c214);
            }
          }

          peg$silentFails--;

          if (s2 === peg$FAILED) {
            s1 = void 0;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }

          if (s1 !== peg$FAILED) {
            s2 = peg$parseSourceCharacter();

            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c221();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSourceCharacter() {
    var s0;

    if (input.length > peg$currPos) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c171);
      }
    }

    return s0;
  }

  function peg$parsedigit() {
    var s0;

    if (peg$c227.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c228);
      }
    }

    return s0;
  }

  function peg$parseequal() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c229;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c230);
      }
    }

    return s0;
  }

  function peg$parsedot() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c25;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c26);
      }
    }

    return s0;
  }

  function peg$parseBooleanLiteral() {
    var s0, s1;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c231) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c232);
      }
    }

    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c233) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c234);
        }
      }

      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c62) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c63);
          }
        }
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c235(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parseNumberLiteral() {
    var s0, s1;
    s0 = peg$currPos;
    s1 = peg$parsefloat();

    if (s1 === peg$FAILED) {
      s1 = peg$parseinteger();
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c236(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parsefloat() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    s1 = [];

    if (peg$c227.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c228);
      }
    }

    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);

        if (peg$c227.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c228);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c26);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = [];

        if (peg$c227.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c228);
          }
        }

        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);

            if (peg$c227.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c228);
              }
            }
          }
        } else {
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c237(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2;
    s0 = peg$currPos;
    s1 = [];

    if (peg$c227.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c228);
      }
    }

    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);

        if (peg$c227.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c228);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c238(s1);
    }

    s0 = s1;
    return s0;
  }

  var data = {
    schemas: [],
    tables: [],
    refs: [],
    enums: [],
    tableGroups: [],
    project: {}
  };
  var projectCnt = 0;
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};