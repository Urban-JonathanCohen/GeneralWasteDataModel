"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function makeDefaultConstraint(_keyword, constExpression) {
  var value = {};

  if (constExpression.type) {
    switch (constExpression.type) {
      case 'string':
      case 'number':
      case 'boolean':
        value.type = constExpression.type;
        break;

      default:
        value.type = 'expression';
        break;
    }
  } else {
    value.type = 'expression';
  }

  value.value = constExpression.value;
  return {
    type: 'dbdefault',
    value: value
  };
}

function makeConstraintCheckEnum(fieldName, _ununsed, values) {
  var valuesProp = [];
  values.forEach(function (value) {
    valuesProp.push({
      name: value.value.value,
      token: value.value.token
    });
  });
  return {
    type: 'enums',
    value: {
      name: "".concat(fieldName, "_enum"),
      values: valuesProp,
      fieldName: fieldName // for alter table add enum

    }
  };
}

function makeTableConstraint(constraintName, option) {
  if (!option) return null;
  return {
    type: option.type,
    value: _objectSpread({}, option.value, {
      name: option.type === 'indexes' && option.value.pk ? null : constraintName
    })
  };
}

module.exports = {
  makeConstraintCheckEnum: makeConstraintCheckEnum,
  makeDefaultConstraint: makeDefaultConstraint,
  makeTableConstraint: makeTableConstraint
};