"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _ = require('lodash');

function createRefFromInlineRef(linesRefs, inlineRefs, fieldName, tableName) {
  if (!inlineRefs || inlineRefs.length === 0) return;
  var newRef = {};
  var inlineRef = inlineRefs[0];
  newRef.onUpdate = inlineRef.onUpdate;
  newRef.onDelete = inlineRef.onDelete;
  newRef.endpoints = [];
  newRef.endpoints.push({
    tableName: tableName,
    fieldNames: [fieldName],
    relation: '*'
  });

  if (!inlineRef.endpoint.fieldNames) {
    inlineRef.endpoint.fieldNames = newRef.endpoints[0].fieldNames;
  }

  newRef.endpoints.push(inlineRef.endpoint);
  linesRefs.push(newRef);
}

function pushOutEnum(linesEnums, fieldValue, tableName) {
  if (fieldValue.enums) {
    var _enum = fieldValue.enums;
    var fieldType = fieldValue.type;
    _enum.name = "".concat(tableName, "_").concat(fieldValue.enums.name);
    fieldType.type_name = _enum.name;
    fieldType.args = _enum.values.map(function (value) {
      return "'".concat(value.name, "'");
    }).join(', ');
    linesEnums.push(_enum);
    fieldValue.enums = null;
  }
}

function pushOutIndex(linesIndexes, fieldValue) {
  if (fieldValue.indexes) {
    fieldValue.indexes.columns.push({
      value: fieldValue.name,
      type: 'column'
    });
    linesIndexes.push(fieldValue.indexes);
    fieldValue.indexes = null;
  }
}

function getLinesValue(lines, tableName) {
  var value = {
    fields: [],
    enums: [],
    refs: [],
    indexes: []
  };
  lines.forEach(function (line) {
    if (line && value[line.type]) {
      if (line.type === 'fields') {
        pushOutEnum(value.enums, line.value, tableName);
        pushOutIndex(value.indexes, line.value);
        createRefFromInlineRef(value.refs, line.value.inline_refs, line.value.name, tableName);
      }

      if (line.type === 'refs') {
        var ref = line.value;
        ref.endpoints[0].tableName = tableName;
      }

      value[line.type].push(line.value);
    }
  });
  return {
    type: 'lines',
    value: value
  };
}

function makeTable(_keyword, tableName, _keyword2, lines) {
  var linesValue = getLinesValue(lines, _.last(tableName));
  return {
    type: 'tables',
    value: _objectSpread({
      name: _.last(tableName)
    }, linesValue.value, {
      schemaName: tableName.length > 1 ? tableName[tableName.length - 2] : null
    })
  };
}

module.exports = {
  makeTable: makeTable
};