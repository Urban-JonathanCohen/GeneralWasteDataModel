"use strict";

var _ = require('lodash');

function findTable(ast, tableName) {
  return ast.tables.find(function (_table) {
    return _table.name === tableName;
  });
}

function findField(table, fieldName) {
  return table.fields.find(function (_field) {
    return _field.name === fieldName;
  });
}

function handleIndexes(index, ast) {
  var table = findTable(ast, index.tableName);
  table.indexes.push(index);
  index.tableName = null;
}

function pushOut(values, astProp) {
  values.forEach(function (value) {
    astProp.push(value);
  });
}

function handleTable(table, ast) {
  pushOut(table.enums, ast.enums);
  pushOut(table.refs, ast.refs);
  table.enums.forEach(function (_enum) {
    _enum.fieldName = null;
  });
  table.enums = null;
  table.refs = null;
}

function handleDefaults(dbdefault, ast) {
  var table = findTable(ast, dbdefault.tableName);
  var field = findField(table, dbdefault.fieldName);
  dbdefault.fieldName = null;
  dbdefault.tableName = null;
  field.dbdefault = dbdefault;
}

function handleEnums(_enum, ast) {
  var table = findTable(ast, _enum.tableName);
  var field = findField(table, _enum.fieldName);
  _enum.name = "".concat(_enum.tableName, "_").concat(_enum.fieldName, "_enum");
  _enum.fieldName = null;
  _enum.tableName = null;
  field.type.type_name = _enum.name;
  field.type.args = _enum.values.map(function (value) {
    return "'".concat(value.name, "'");
  }).join(', ');
}

function handleStatement(_statements) {
  var ast = {
    tables: [],
    refs: [],
    indexes: [],
    enums: []
  };

  var statements = _.flatten(_statements);

  statements.forEach(function (statement) {
    if (!statement) return;

    switch (statement.type) {
      case 'tables':
        handleTable(statement.value, ast);
        break;
      // from alter table add

      case 'indexes':
        handleIndexes(statement.value, ast);
        break;

      case 'dbdefault':
        handleDefaults(statement.value, ast);
        break;

      case 'enums':
        handleEnums(statement.value, ast);
        break;

      default:
        break;
    }

    if (statement.type && ast[statement.type]) ast[statement.type].push(statement.value);
  });
  ast.indexes = null;
  return ast;
}

module.exports = {
  handleStatement: handleStatement
};