"use strict";

var _pegjsRequireImport = _interopRequireDefault(require("pegjs-require-import"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

_bluebird["default"].promisifyAll(_fs["default"]);

function buildParserFile(_x, _x2) {
  return _buildParserFile.apply(this, arguments);
}

function _buildParserFile() {
  _buildParserFile = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(source, fileName) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", _fs["default"].writeFileAsync(_path["default"].resolve(__dirname, fileName), source));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _buildParserFile.apply(this, arguments);
}

var options = {
  format: 'commonjs',
  dependencies: {
    _: 'lodash',
    pluralize: 'pluralize'
  },
  output: 'source'
};
var mysqlParserSource = (0, _pegjsRequireImport["default"])('./mysql/parser.pegjs', options);
var postgresParserSource = (0, _pegjsRequireImport["default"])('./postgresql/parser.pegjs', options);
var dbmlParserSource = (0, _pegjsRequireImport["default"])('./dbml/parser.pegjs', options);
var schemarbParserSource = (0, _pegjsRequireImport["default"])('./schemarb/parser.pegjs', options);

_bluebird["default"].all([buildParserFile(mysqlParserSource, 'mysqlParser.js'), buildParserFile(postgresParserSource, 'postgresParser.js'), buildParserFile(dbmlParserSource, 'dbmlParser.js'), buildParserFile(schemarbParserSource, 'schemarbParser.js')]).then(function () {
  console.log('Build parsers completed!');
})["catch"](function (err) {
  console.log(err);
});