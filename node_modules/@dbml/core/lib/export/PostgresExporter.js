"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PostgresExporter =
/*#__PURE__*/
function () {
  function PostgresExporter() {
    _classCallCheck(this, PostgresExporter);
  }

  _createClass(PostgresExporter, null, [{
    key: "exportEnums",
    value: function exportEnums(enumIds, model) {
      var enumArr = enumIds.map(function (enumId) {
        var _enum = model.enums[enumId];
        var schema = model.schemas[_enum.schemaId];

        var enumValueArr = _enum.valueIds.map(function (valueId) {
          var value = model.enumValues[valueId];
          return "  '".concat(value.name, "'");
        });

        var enumValueStr = enumValueArr.join(',\n');
        var line = "CREATE TYPE ".concat((0, _utils.shouldPrintSchema)(schema, model) ? "\"".concat(schema.name, "\".") : '', "\"").concat(_enum.name, "\" AS ENUM (\n").concat(enumValueStr, "\n);\n");
        return line;
      });
      return enumArr.length ? enumArr.join('\n') : '';
    }
  }, {
    key: "getFieldLines",
    value: function getFieldLines(tableId, model) {
      var table = model.tables[tableId];
      var lines = table.fieldIds.map(function (fieldId) {
        var field = model.fields[fieldId];
        var line = '';

        if (field.increment) {
          var typeSerial = field.type.type_name === 'bigint' ? 'BIGSERIAL' : 'SERIAL';
          line = "\"".concat(field.name, "\" ").concat(typeSerial);
        } else if ((0, _utils.hasWhiteSpace)(field.type.type_name)) {
          line = "\"".concat(field.name, "\" \"").concat(field.type.type_name, "\"");
        } else {
          line = "\"".concat(field.name, "\" ").concat(field.type.type_name);
        }

        if (field.unique) {
          line += ' UNIQUE';
        }

        if (field.pk) {
          line += ' PRIMARY KEY';
        }

        if (field.not_null) {
          line += ' NOT NULL';
        }

        if (field.dbdefault) {
          if (field.dbdefault.type === 'expression') {
            line += " DEFAULT (".concat(field.dbdefault.value, ")");
          } else if (field.dbdefault.type === 'string') {
            line += " DEFAULT '".concat(field.dbdefault.value, "'");
          } else {
            line += " DEFAULT ".concat(field.dbdefault.value);
          }
        }

        return line;
      });
      return lines;
    }
  }, {
    key: "getCompositePKs",
    value: function getCompositePKs(tableId, model) {
      var table = model.tables[tableId];
      var compositePkIds = table.indexIds ? table.indexIds.filter(function (indexId) {
        return model.indexes[indexId].pk;
      }) : [];
      var lines = compositePkIds.map(function (keyId) {
        var key = model.indexes[keyId];
        var line = 'PRIMARY KEY';
        var columnArr = [];
        key.columnIds.forEach(function (columnId) {
          var column = model.indexColumns[columnId];
          var columnStr = '';

          if (column.type === 'expression') {
            columnStr = "(".concat(column.value, ")");
          } else {
            columnStr = "\"".concat(column.value, "\"");
          }

          columnArr.push(columnStr);
        });
        line += " (".concat(columnArr.join(', '), ")");
        return line;
      });
      return lines;
    }
  }, {
    key: "getTableContentArr",
    value: function getTableContentArr(tableIds, model) {
      var tableContentArr = tableIds.map(function (tableId) {
        var fieldContents = PostgresExporter.getFieldLines(tableId, model);
        var compositePKs = PostgresExporter.getCompositePKs(tableId, model);
        return {
          tableId: tableId,
          fieldContents: fieldContents,
          compositePKs: compositePKs
        };
      });
      return tableContentArr;
    }
  }, {
    key: "exportTables",
    value: function exportTables(tableIds, model) {
      var tableContentArr = PostgresExporter.getTableContentArr(tableIds, model);
      var tableStrs = tableContentArr.map(function (tableContent) {
        var content = [].concat(_toConsumableArray(tableContent.fieldContents), _toConsumableArray(tableContent.compositePKs));
        var table = model.tables[tableContent.tableId];
        var schema = model.schemas[table.schemaId];
        var tableStr = "CREATE TABLE ".concat((0, _utils.shouldPrintSchema)(schema, model) ? "\"".concat(schema.name, "\".") : '', "\"").concat(table.name, "\" (\n").concat(content.map(function (line) {
          return "  ".concat(line);
        }).join(',\n'), "\n);\n");
        return tableStr;
      });
      return tableStrs.length ? tableStrs.join('\n') : '';
    }
  }, {
    key: "buildFieldName",
    value: function buildFieldName(fieldIds, model) {
      var fieldNames = fieldIds.map(function (fieldId) {
        return "\"".concat(model.fields[fieldId].name, "\"");
      }).join(', ');
      return "(".concat(fieldNames, ")");
    }
  }, {
    key: "exportRefs",
    value: function exportRefs(refIds, model) {
      var _this = this;

      var strArr = refIds.map(function (refId) {
        var ref = model.refs[refId];
        var refEndpointIndex = ref.endpointIds.findIndex(function (endpointId) {
          return model.endpoints[endpointId].relation === '1';
        });
        var foreignEndpointId = ref.endpointIds[1 - refEndpointIndex];
        var refEndpointId = ref.endpointIds[refEndpointIndex];
        var foreignEndpoint = model.endpoints[foreignEndpointId];
        var refEndpoint = model.endpoints[refEndpointId];
        var refEndpointField = model.fields[refEndpoint.fieldIds[0]];
        var refEndpointTable = model.tables[refEndpointField.tableId];
        var refEndpointSchema = model.schemas[refEndpointTable.schemaId];

        var refEndpointFieldName = _this.buildFieldName(refEndpoint.fieldIds, model, 'postgres');

        var foreignEndpointField = model.fields[foreignEndpoint.fieldIds[0]];
        var foreignEndpointTable = model.tables[foreignEndpointField.tableId];
        var foreignEndpointSchema = model.schemas[foreignEndpointTable.schemaId];

        var foreignEndpointFieldName = _this.buildFieldName(foreignEndpoint.fieldIds, model, 'postgres');

        var line = "ALTER TABLE ".concat((0, _utils.shouldPrintSchema)(foreignEndpointSchema, model) ? "\"".concat(foreignEndpointSchema.name, "\".") : '', "\"").concat(foreignEndpointTable.name, "\" ADD ");

        if (ref.name) {
          line += "CONSTRAINT \"".concat(ref.name, "\" ");
        }

        line += "FOREIGN KEY ".concat(foreignEndpointFieldName, " REFERENCES ").concat((0, _utils.shouldPrintSchema)(refEndpointSchema, model) ? "\"".concat(refEndpointSchema.name, "\".") : '', "\"").concat(refEndpointTable.name, "\" ").concat(refEndpointFieldName);

        if (ref.onDelete) {
          line += " ON DELETE ".concat(ref.onDelete.toUpperCase());
        }

        if (ref.onUpdate) {
          line += " ON UPDATE ".concat(ref.onUpdate.toUpperCase());
        }

        line += ';\n';
        return line;
      });
      return strArr.length ? strArr.join('\n') : '';
    }
  }, {
    key: "exportIndexes",
    value: function exportIndexes(indexIds, model) {
      // exclude composite pk index
      var indexArr = indexIds.filter(function (indexId) {
        return !model.indexes[indexId].pk;
      }).map(function (indexId) {
        var index = model.indexes[indexId];
        var table = model.tables[index.tableId];
        var schema = model.schemas[table.schemaId];
        var line = 'CREATE';

        if (index.unique) {
          line += ' UNIQUE';
        }

        var indexName = index.name ? "\"".concat(index.name, "\"") : '';
        line += ' INDEX';

        if (indexName) {
          line += " ".concat(indexName);
        }

        line += " ON ".concat((0, _utils.shouldPrintSchema)(schema, model) ? "\"".concat(schema.name, "\".") : '', "\"").concat(table.name, "\"");

        if (index.type) {
          line += " USING ".concat(index.type.toUpperCase());
        }

        var columnArr = [];
        index.columnIds.forEach(function (columnId) {
          var column = model.indexColumns[columnId];
          var columnStr = '';

          if (column.type === 'expression') {
            columnStr = "(".concat(column.value, ")");
          } else {
            columnStr = "\"".concat(column.value, "\"");
          }

          columnArr.push(columnStr);
        });
        line += " (".concat(columnArr.join(', '), ")");
        line += ';\n';
        return line;
      });
      return indexArr.length ? indexArr.join('\n') : '';
    }
  }, {
    key: "exportComments",
    value: function exportComments(comments, model) {
      var commentArr = comments.map(function (comment) {
        var line = 'COMMENT ON';
        var table = model.tables[comment.tableId];
        var schema = model.schemas[table.schemaId];

        switch (comment.type) {
          case 'table':
            {
              line += " TABLE ".concat((0, _utils.shouldPrintSchema)(schema, model) ? "\"".concat(schema.name, "\".") : '', "\"").concat(table.name, "\" IS '").concat(table.note.replace(/'/g, "\""), "'");
              break;
            }

          case 'column':
            {
              var field = model.fields[comment.fieldId];
              line += " COLUMN ".concat((0, _utils.shouldPrintSchema)(schema, model) ? "\"".concat(schema.name, "\".") : '', "\"").concat(table.name, "\".\"").concat(field.name, "\" IS '").concat(field.note.replace(/'/g, "\""), "'");
              break;
            }

          default:
            break;
        }

        line += ';\n';
        return line;
      });
      return commentArr.length ? commentArr.join('\n') : '';
    }
  }, {
    key: "export",
    value: function _export(model) {
      var res = '';
      var hasBlockAbove = false;
      var database = model.database['1'];
      var indexIds = [];
      var comments = [];
      database.schemaIds.forEach(function (schemaId) {
        var schema = model.schemas[schemaId];
        var tableIds = schema.tableIds,
            enumIds = schema.enumIds,
            refIds = schema.refIds;

        if ((0, _utils.shouldPrintSchema)(schema, model)) {
          if (hasBlockAbove) res += '\n';
          res += "CREATE SCHEMA \"".concat(schema.name, "\";\n");
          hasBlockAbove = true;
        }

        if (!_lodash["default"].isEmpty(enumIds)) {
          if (hasBlockAbove) res += '\n';
          res += PostgresExporter.exportEnums(enumIds, model);
          hasBlockAbove = true;
        }

        if (!_lodash["default"].isEmpty(tableIds)) {
          if (hasBlockAbove) res += '\n';
          res += PostgresExporter.exportTables(tableIds, model);
          hasBlockAbove = true;
        }

        if (!_lodash["default"].isEmpty(refIds)) {
          if (hasBlockAbove) res += '\n';
          res += PostgresExporter.exportRefs(refIds, model);
          hasBlockAbove = true;
        }

        indexIds.push.apply(indexIds, _toConsumableArray(_lodash["default"].flatten(tableIds.map(function (tableId) {
          return model.tables[tableId].indexIds;
        }))));
        comments.push.apply(comments, _toConsumableArray(_lodash["default"].flatten(tableIds.map(function (tableId) {
          var _model$tables$tableId = model.tables[tableId],
              fieldIds = _model$tables$tableId.fieldIds,
              note = _model$tables$tableId.note;
          var fieldObjects = fieldIds.filter(function (fieldId) {
            return model.fields[fieldId].note;
          }).map(function (fieldId) {
            return {
              type: 'column',
              fieldId: fieldId,
              tableId: tableId
            };
          });
          return note ? [{
            type: 'table',
            tableId: tableId
          }].concat(fieldObjects) : fieldObjects;
        }))));
      });

      if (!_lodash["default"].isEmpty(indexIds)) {
        if (hasBlockAbove) res += '\n';
        res += PostgresExporter.exportIndexes(indexIds, model);
        hasBlockAbove = true;
      }

      if (!_lodash["default"].isEmpty(comments)) {
        if (hasBlockAbove) res += '\n';
        res += PostgresExporter.exportComments(comments, model);
        hasBlockAbove = true;
      }

      return res;
    }
  }]);

  return PostgresExporter;
}();

var _default = PostgresExporter;
exports["default"] = _default;