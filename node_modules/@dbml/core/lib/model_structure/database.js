"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _schema = _interopRequireDefault(require("./schema"));

var _ref2 = _interopRequireDefault(require("./ref"));

var _enum = _interopRequireDefault(require("./enum"));

var _tableGroup = _interopRequireDefault(require("./tableGroup"));

var _table = _interopRequireDefault(require("./table"));

var _element = _interopRequireDefault(require("./element"));

var _config = require("./config");

var _dbState = _interopRequireDefault(require("./dbState"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Database =
/*#__PURE__*/
function (_Element) {
  _inherits(Database, _Element);

  function Database(_ref) {
    var _this;

    var _ref$schemas = _ref.schemas,
        schemas = _ref$schemas === void 0 ? [] : _ref$schemas,
        _ref$tables = _ref.tables,
        tables = _ref$tables === void 0 ? [] : _ref$tables,
        _ref$enums = _ref.enums,
        enums = _ref$enums === void 0 ? [] : _ref$enums,
        _ref$refs = _ref.refs,
        refs = _ref$refs === void 0 ? [] : _ref$refs,
        _ref$tableGroups = _ref.tableGroups,
        tableGroups = _ref$tableGroups === void 0 ? [] : _ref$tableGroups,
        _ref$project = _ref.project,
        project = _ref$project === void 0 ? {} : _ref$project;

    _classCallCheck(this, Database);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Database).call(this));
    _this.dbState = new _dbState["default"]();

    _this.generateId();

    _this.hasDefaultSchema = false;
    _this.schemas = [];
    _this.note = project.note;
    _this.databaseType = project.database_type;
    _this.name = project.name; // The process order is important. Do not change !

    _this.processSchemas(schemas);

    _this.processSchemaElements(tables, _config.TABLE);

    _this.processSchemaElements(refs, _config.REF);

    _this.processSchemaElements(enums, _config.ENUM);

    _this.processSchemaElements(tableGroups, _config.TABLE_GROUP);

    return _this;
  }

  _createClass(Database, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('dbId');
    }
  }, {
    key: "processSchemas",
    value: function processSchemas(rawSchemas) {
      var _this2 = this;

      rawSchemas.forEach(function (schema) {
        _this2.pushSchema(new _schema["default"](_objectSpread({}, schema, {
          database: _this2
        })));
      });
    }
  }, {
    key: "pushSchema",
    value: function pushSchema(schema) {
      this.checkSchema(schema);
      this.schemas.push(schema);
    }
  }, {
    key: "checkSchema",
    value: function checkSchema(schema) {
      if (this.schemas.some(function (s) {
        return s.name === schema.name;
      })) {
        schema.error("Schemas ".concat(schema.name, " existed"));
      }
    }
  }, {
    key: "processSchemaElements",
    value: function processSchemaElements(elements, elementType) {
      var _this3 = this;

      var schema;
      elements.forEach(function (element) {
        if (element.schemaName) {
          schema = _this3.findOrCreateSchema(element.schemaName);

          if (element.schemaName === _config.DEFAULT_SCHEMA_NAME) {
            _this3.hasDefaultSchema = true;
          }
        } else {
          schema = _this3.findOrCreateSchema(_config.DEFAULT_SCHEMA_NAME);
        }

        switch (elementType) {
          case _config.TABLE:
            schema.pushTable(new _table["default"](_objectSpread({}, element, {
              schema: schema
            })));
            break;

          case _config.ENUM:
            schema.pushEnum(new _enum["default"](_objectSpread({}, element, {
              schema: schema
            })));
            break;

          case _config.TABLE_GROUP:
            schema.pushTableGroup(new _tableGroup["default"](_objectSpread({}, element, {
              schema: schema
            })));
            break;

          case _config.REF:
            schema.pushRef(new _ref2["default"](_objectSpread({}, element, {
              schema: schema
            })));
            break;

          default:
            break;
        }
      });
    }
  }, {
    key: "findOrCreateSchema",
    value: function findOrCreateSchema(schemaName) {
      var schema = this.schemas.find(function (s) {
        return s.name === schemaName || s.alias === schemaName;
      }); // create new schema if schema not found

      if (!schema) {
        schema = new _schema["default"]({
          name: schemaName,
          note: schemaName === _config.DEFAULT_SCHEMA_NAME ? "Default ".concat(_lodash["default"].capitalize(_config.DEFAULT_SCHEMA_NAME), " Schema") : '',
          database: this
        });
        this.pushSchema(schema);
      }

      return schema;
    }
  }, {
    key: "findTable",
    value: function findTable(rawTable) {
      var schema = this.findOrCreateSchema(rawTable.schemaName || _config.DEFAULT_SCHEMA_NAME);

      if (!schema) {
        this.error("Schema ".concat(rawTable.schemaName || _config.DEFAULT_SCHEMA_NAME, " don't exist"));
      }

      return schema.findTable(rawTable.name);
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread({}, this.exportChild());
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        hasDefaultSchema: this.hasDefaultSchema,
        note: this.note,
        databaseType: this.databaseType,
        name: this.name
      };
    }
  }, {
    key: "exportChild",
    value: function exportChild() {
      return {
        schemas: this.schemas.map(function (s) {
          return s["export"]();
        })
      };
    }
  }, {
    key: "exportChildIds",
    value: function exportChildIds() {
      return {
        schemaIds: this.schemas.map(function (s) {
          return s.id;
        })
      };
    }
  }, {
    key: "normalize",
    value: function normalize() {
      var normalizedModel = {
        database: _defineProperty({}, this.id, _objectSpread({
          id: this.id
        }, this.shallowExport(), {}, this.exportChildIds())),
        schemas: {},
        refs: {},
        enums: {},
        tableGroups: {},
        tables: {},
        endpoints: {},
        enumValues: {},
        indexes: {},
        indexColumns: {},
        fields: {}
      };
      this.schemas.forEach(function (schema) {
        return schema.normalize(normalizedModel);
      });
      return normalizedModel;
    }
  }]);

  return Database;
}(_element["default"]);

var _default = Database;
exports["default"] = _default;