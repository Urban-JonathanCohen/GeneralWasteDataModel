"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _element = _interopRequireDefault(require("./element"));

var _config = require("./config");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Endpoint =
/*#__PURE__*/
function (_Element) {
  _inherits(Endpoint, _Element);

  function Endpoint(_ref) {
    var _this;

    var tableName = _ref.tableName,
        schemaName = _ref.schemaName,
        fieldNames = _ref.fieldNames,
        relation = _ref.relation,
        token = _ref.token,
        ref = _ref.ref;

    _classCallCheck(this, Endpoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Endpoint).call(this, token));
    _this.relation = relation;
    _this.schemaName = schemaName;
    _this.tableName = tableName;
    _this.fieldNames = fieldNames;
    _this.fields = [];
    _this.ref = ref;
    _this.dbState = _this.ref.dbState;

    _this.generateId(); // Use name of schema,table and field object
    // Name in constructor could be alias


    var schema = ref.schema.database.findOrCreateSchema(schemaName || _config.DEFAULT_SCHEMA_NAME);
    var table = schema.findTable(tableName);

    if (!table) {
      _this.error("Can't find table ".concat((0, _utils.shouldPrintSchema)(schema) ? "\"".concat(schema.name, "\".") : '', "\"").concat(tableName, "\""));
    }

    _this.setFields(fieldNames, table);

    return _this;
  }

  _createClass(Endpoint, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('endpointId');
    }
  }, {
    key: "equals",
    value: function equals(endpoint) {
      if (this.fields.length !== endpoint.fields.length) return false;
      return this.compareFields(endpoint);
    }
  }, {
    key: "compareFields",
    value: function compareFields(endpoint) {
      var sortedThisFieldIds = this.fields.map(function (field) {
        return field.id;
      }).sort();
      var sortedEndpointFieldIds = endpoint.fields.map(function (field) {
        return field.id;
      }).sort();

      for (var i = 0; i < sortedThisFieldIds.length; i += 1) {
        if (sortedThisFieldIds[i] !== sortedEndpointFieldIds[i]) return false;
      }

      return true;
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread({}, this.shallowExport());
    }
  }, {
    key: "exportParentIds",
    value: function exportParentIds() {
      return {
        refId: this.ref.id,
        fieldIds: this.fields.map(function (field) {
          return field.id;
        })
      };
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        schemaName: this.schemaName,
        tableName: this.tableName,
        fieldNames: this.fieldNames,
        relation: this.relation
      };
    }
  }, {
    key: "setFields",
    value: function setFields(fieldNames, table) {
      var _this2 = this;

      fieldNames.forEach(function (fieldName) {
        var field = table.findField(fieldName);

        if (!field) {
          _this2.error("Can't find field ".concat((0, _utils.shouldPrintSchema)(table.schema) ? "\"".concat(table.schema.name, "\".") : '', "\"").concat(fieldName, "\" in table \"").concat(_this2.tableName, "\""));
        }

        _this2.fields.push(field);

        field.pushEndpoint(_this2);
      });
    }
  }, {
    key: "normalize",
    value: function normalize(model) {
      model.endpoints = _objectSpread({}, model.endpoints, _defineProperty({}, this.id, _objectSpread({
        id: this.id
      }, this.shallowExport(), {}, this.exportParentIds())));
    }
  }]);

  return Endpoint;
}(_element["default"]);

var _default = Endpoint;
exports["default"] = _default;