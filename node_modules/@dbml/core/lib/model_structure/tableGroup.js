"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _element = _interopRequireDefault(require("./element"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var TableGroup =
/*#__PURE__*/
function (_Element) {
  _inherits(TableGroup, _Element);

  function TableGroup(_ref) {
    var _this;

    var name = _ref.name,
        token = _ref.token,
        _ref$tables = _ref.tables,
        tables = _ref$tables === void 0 ? [] : _ref$tables,
        _ref$schema = _ref.schema,
        schema = _ref$schema === void 0 ? {} : _ref$schema;

    _classCallCheck(this, TableGroup);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableGroup).call(this, token));
    _this.name = name;
    _this.tables = [];
    _this.schema = schema;
    _this.dbState = _this.schema.dbState;

    _this.generateId();

    _this.processTables(tables);

    return _this;
  }

  _createClass(TableGroup, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('tableGroupId');
    }
  }, {
    key: "processTables",
    value: function processTables(rawTables) {
      var _this2 = this;

      rawTables.forEach(function (rawTable) {
        var table = _this2.schema.database.findTable(rawTable);

        if (!table) {
          _this2.error("Table ".concat(rawTable.schemaName ? "\"".concat(rawTable.schemaName, "\".") : '').concat(rawTable.name, " don't exist"));
        }

        _this2.pushTable(table);
      });
    }
  }, {
    key: "pushTable",
    value: function pushTable(table) {
      this.checkTable(table);
      this.tables.push(table);
      table.group = this;
    }
  }, {
    key: "checkTable",
    value: function checkTable(table) {
      if (this.tables.some(function (t) {
        return t.id === table.id;
      })) {
        this.error("Table ".concat((0, _utils.shouldPrintSchema)(table.schema) ? "\"".concat(table.schema.name, "\".") : '', ".").concat(table.name, " is already in the group"));
      }

      if (table.group) {
        this.error("Table ".concat((0, _utils.shouldPrintSchema)(table.schema) ? "\"".concat(table.schema.name, "\".") : '', ".").concat(table.name, " is already in group ").concat((0, _utils.shouldPrintSchema)(table.group.schema) ? "\"".concat(table.group.schema.name, "\".") : '').concat(table.group.name));
      }
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread({}, this.shallowExport(), {}, this.exportChild());
    }
  }, {
    key: "exportChild",
    value: function exportChild() {
      return {
        tables: this.tables.map(function (t) {
          return {
            tableName: t.name,
            schemaName: t.schema.name
          };
        })
      };
    }
  }, {
    key: "exportChildIds",
    value: function exportChildIds() {
      return {
        tableIds: this.tables.map(function (t) {
          return t.id;
        })
      };
    }
  }, {
    key: "exportParentIds",
    value: function exportParentIds() {
      return {
        schemaId: this.schema.id
      };
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        name: this.name
      };
    }
  }, {
    key: "normalize",
    value: function normalize(model) {
      model.tableGroups = _objectSpread({}, model.tableGroups, _defineProperty({}, this.id, _objectSpread({
        id: this.id
      }, this.shallowExport(), {}, this.exportChildIds(), {}, this.exportParentIds())));
    }
  }]);

  return TableGroup;
}(_element["default"]);

var _default = TableGroup;
exports["default"] = _default;