"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _element = _interopRequireDefault(require("./element"));

var _indexColumn = _interopRequireDefault(require("./indexColumn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Index =
/*#__PURE__*/
function (_Element) {
  _inherits(Index, _Element);

  function Index() {
    var _this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        columns = _ref.columns,
        type = _ref.type,
        unique = _ref.unique,
        pk = _ref.pk,
        token = _ref.token,
        name = _ref.name,
        note = _ref.note,
        _ref$table = _ref.table,
        table = _ref$table === void 0 ? {} : _ref$table;

    _classCallCheck(this, Index);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, token));
    _this.name = name;
    _this.type = type;
    _this.unique = unique;
    _this.note = note;
    _this.pk = pk;
    _this.columns = [];
    _this.table = table;
    _this.dbState = _this.table.dbState;

    _this.generateId();

    _this.processIndexColumns(columns);

    return _this;
  }

  _createClass(Index, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('indexId');
    }
  }, {
    key: "processIndexColumns",
    value: function processIndexColumns(rawColumns) {
      var _this2 = this;

      rawColumns.forEach(function (column) {
        _this2.pushIndexColumn(new _indexColumn["default"](_objectSpread({}, column, {
          index: _this2
        })));
      });
    }
  }, {
    key: "pushIndexColumn",
    value: function pushIndexColumn(column) {
      this.checkIndexColumn(column);
      this.columns.push(column);
    }
  }, {
    key: "checkIndexColumn",
    value: function checkIndexColumn(column) {
      if (this.columns.some(function (c) {
        return c.type === column.type && c.value === column.value;
      })) {
        column.error("Index column ".concat(column.value, " existed"));
      }
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread({}, this.shallowExport(), {}, this.exportChild());
    }
  }, {
    key: "exportChild",
    value: function exportChild() {
      return {
        columns: this.columns.map(function (c) {
          return c["export"]();
        })
      };
    }
  }, {
    key: "exportChildIds",
    value: function exportChildIds() {
      return {
        columnIds: this.columns.map(function (c) {
          return c.id;
        })
      };
    }
  }, {
    key: "exportParentIds",
    value: function exportParentIds() {
      return {
        tableId: this.table.id
      };
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        name: this.name,
        type: this.type,
        unique: this.unique,
        pk: this.pk,
        note: this.note
      };
    }
  }, {
    key: "normalize",
    value: function normalize(model) {
      model.indexes = _objectSpread({}, model.indexes, _defineProperty({}, this.id, _objectSpread({
        id: this.id
      }, this.shallowExport(), {}, this.exportChildIds(), {}, this.exportParentIds())));
      this.columns.forEach(function (c) {
        return c.normalize(model);
      });
    }
  }]);

  return Index;
}(_element["default"]);

var _default = Index;
exports["default"] = _default;