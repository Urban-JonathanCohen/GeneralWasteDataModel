"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _element = _interopRequireDefault(require("./element"));

var _endpoint = _interopRequireDefault(require("./endpoint"));

var _config = require("./config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Compare two pairs of objects
 * @param {Array} pair1
 * @param {Array} pair2
 * @returns {Boolean}
 */
function isEqualPair(pair1, pair2) {
  return pair1[0].equals(pair2[0]) && pair1[1].equals(pair2[1]);
}

var Ref =
/*#__PURE__*/
function (_Element) {
  _inherits(Ref, _Element);

  function Ref() {
    var _this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        name = _ref.name,
        endpoints = _ref.endpoints,
        onDelete = _ref.onDelete,
        onUpdate = _ref.onUpdate,
        token = _ref.token,
        _ref$schema = _ref.schema,
        schema = _ref$schema === void 0 ? {} : _ref$schema;

    _classCallCheck(this, Ref);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Ref).call(this, token));
    _this.name = name;
    _this.onDelete = onDelete;
    _this.onUpdate = onUpdate;
    _this.endpoints = [];
    _this.schema = schema;
    _this.dbState = _this.schema.dbState;

    _this.generateId();

    _this.processEndpoints(endpoints);

    return _this;
  }

  _createClass(Ref, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('refId');
    }
  }, {
    key: "processEndpoints",
    value: function processEndpoints(rawEndpoints) {
      var _this2 = this;

      rawEndpoints.forEach(function (endpoint) {
        _this2.endpoints.push(new _endpoint["default"](_objectSpread({}, endpoint, {
          ref: _this2
        })));

        if (endpoint.schemaName === _config.DEFAULT_SCHEMA_NAME) {
          _this2.database.hasDefaultSchema = true;
        }
      });

      if (this.endpoints[0].equals(this.endpoints[1])) {
        this.error('Two endpoints are the same');
      }

      if (this.endpoints[0].fields.length !== this.endpoints[1].fields.length) {
        this.error('Two endpoints have unequal number of fields');
      } // TODO: Handle Error with different number of fields

    }
  }, {
    key: "equals",
    value: function equals(ref) {
      return isEqualPair(this.endpoints, ref.endpoints) || isEqualPair(this.endpoints, ref.endpoints.slice().reverse());
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread({}, this.shallowExport(), {}, this.exportChild());
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        name: this.name,
        onDelete: this.onDelete,
        onUpdate: this.onUpdate
      };
    }
  }, {
    key: "exportChild",
    value: function exportChild() {
      return {
        endpoints: this.endpoints.map(function (e) {
          return e["export"]();
        })
      };
    }
  }, {
    key: "exportChildIds",
    value: function exportChildIds() {
      return {
        endpointIds: this.endpoints.map(function (e) {
          return e.id;
        })
      };
    }
  }, {
    key: "exportParentIds",
    value: function exportParentIds() {
      return {
        schemaId: this.schema.id
      };
    }
  }, {
    key: "normalize",
    value: function normalize(model) {
      model.refs = _objectSpread({}, model.refs, _defineProperty({}, this.id, _objectSpread({
        id: this.id
      }, this.shallowExport(), {}, this.exportChildIds(), {}, this.exportParentIds())));
      this.endpoints.forEach(function (endpoint) {
        return endpoint.normalize(model);
      });
    }
  }]);

  return Ref;
}(_element["default"]);

var _default = Ref;
exports["default"] = _default;