"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _table = _interopRequireDefault(require("./table"));

var _element = _interopRequireDefault(require("./element"));

var _enum2 = _interopRequireDefault(require("./enum"));

var _config = require("./config");

var _utils = require("./utils");

var _tableGroup = _interopRequireDefault(require("./tableGroup"));

var _ref2 = _interopRequireDefault(require("./ref"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Schema =
/*#__PURE__*/
function (_Element) {
  _inherits(Schema, _Element);

  function Schema() {
    var _this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        name = _ref.name,
        alias = _ref.alias,
        note = _ref.note,
        _ref$tables = _ref.tables,
        tables = _ref$tables === void 0 ? [] : _ref$tables,
        _ref$refs = _ref.refs,
        refs = _ref$refs === void 0 ? [] : _ref$refs,
        _ref$enums = _ref.enums,
        enums = _ref$enums === void 0 ? [] : _ref$enums,
        _ref$tableGroups = _ref.tableGroups,
        tableGroups = _ref$tableGroups === void 0 ? [] : _ref$tableGroups,
        token = _ref.token,
        _ref$database = _ref.database,
        database = _ref$database === void 0 ? {} : _ref$database;

    _classCallCheck(this, Schema);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Schema).call(this, token));
    _this.tables = [];
    _this.enums = [];
    _this.tableGroups = [];
    _this.refs = [];
    _this.name = name;
    _this.note = note;
    _this.alias = alias;
    _this.database = database;
    _this.dbState = _this.database.dbState;

    _this.generateId();

    _this.processTables(tables);

    _this.processEnums(enums);

    _this.processRefs(refs);

    _this.processTableGroups(tableGroups);

    return _this;
  }

  _createClass(Schema, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('schemaId');
    }
  }, {
    key: "processTables",
    value: function processTables(rawTables) {
      var _this2 = this;

      rawTables.forEach(function (table) {
        _this2.pushTable(new _table["default"](_objectSpread({}, table, {
          schema: _this2
        })));
      });
    }
  }, {
    key: "pushTable",
    value: function pushTable(table) {
      this.checkTable(table);
      this.tables.push(table);
    }
  }, {
    key: "checkTable",
    value: function checkTable(table) {
      if (this.tables.some(function (t) {
        return t.name === table.name;
      })) {
        table.error("Table ".concat((0, _utils.shouldPrintSchema)(this) ? "\"".concat(this.name, "\".") : '', "\"").concat(table.name, "\" existed"));
      }
    }
  }, {
    key: "findTable",
    value: function findTable(tableName) {
      return this.tables.find(function (t) {
        return t.name === tableName || t.alias === tableName;
      });
    }
  }, {
    key: "processEnums",
    value: function processEnums(rawEnums) {
      var _this3 = this;

      rawEnums.forEach(function (_enum) {
        _this3.pushEnum(new _enum2["default"](_objectSpread({}, _enum, {
          schema: _this3
        })));
      });
    }
  }, {
    key: "pushEnum",
    value: function pushEnum(_enum) {
      this.checkEnum(_enum);
      this.enums.push(_enum);
      this.bindEnumToField(_enum);
    }
  }, {
    key: "checkEnum",
    value: function checkEnum(_enum) {
      if (this.enums.some(function (e) {
        return e.name === _enum.name;
      })) {
        _enum.error("Enum ".concat((0, _utils.shouldPrintSchema)(this) ? "\"".concat(this.name, "\".") : '', "\"").concat(_enum.name, "\" existed"));
      }
    }
  }, {
    key: "bindEnumToField",
    value: function bindEnumToField(_enum) {
      this.database.schemas.forEach(function (schema) {
        schema.tables.forEach(function (table) {
          table.fields.forEach(function (field) {
            if (_enum.name === field.type.type_name && (field.type.schemaName || _config.DEFAULT_SCHEMA_NAME) === schema.name) {
              field._enum = _enum;

              _enum.pushField(field);
            }
          });
        });
      });
    }
  }, {
    key: "processRefs",
    value: function processRefs(rawRefs) {
      var _this4 = this;

      rawRefs.forEach(function (ref) {
        _this4.pushRef(new _ref2["default"](_objectSpread({}, ref, {
          schema: _this4
        })));
      });
    }
  }, {
    key: "pushRef",
    value: function pushRef(ref) {
      this.checkRef(ref);
      this.refs.push(ref);
    }
  }, {
    key: "checkRef",
    value: function checkRef(ref) {
      if (this.refs.some(function (r) {
        return r.equals(ref);
      })) {
        ref.error('Reference with same endpoints duplicated');
      }
    }
  }, {
    key: "processTableGroups",
    value: function processTableGroups(rawTableGroups) {
      var _this5 = this;

      rawTableGroups.forEach(function (tableGroup) {
        _this5.pushTableGroup(new _tableGroup["default"](_objectSpread({}, tableGroup, {
          schema: _this5
        })));
      });
    }
  }, {
    key: "pushTableGroup",
    value: function pushTableGroup(tableGroup) {
      this.checkTableGroup(tableGroup);
      this.tableGroups.push(tableGroup);
    }
  }, {
    key: "checkTableGroup",
    value: function checkTableGroup(tableGroup) {
      if (this.tableGroups.some(function (tg) {
        return tg.name === tableGroup.name;
      })) {
        tableGroup.error("Table Group ".concat((0, _utils.shouldPrintSchema)(this) ? "\"".concat(this.name, "\".") : '', "\"").concat(tableGroup.name, "\" existed"));
      }
    }
  }, {
    key: "checkSameId",
    value: function checkSameId(schema) {
      return this.name === schema.name || this.alias === schema.name || this.name === schema.alias || this.alias && this.alias === schema.alias;
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread({}, this.shallowExport(), {}, this.exportChild());
    }
  }, {
    key: "exportChild",
    value: function exportChild() {
      return {
        tables: this.tables.map(function (t) {
          return t["export"]();
        }),
        enums: this.enums.map(function (e) {
          return e["export"]();
        }),
        tableGroups: this.tableGroups.map(function (tg) {
          return tg["export"]();
        }),
        refs: this.refs.map(function (r) {
          return r["export"]();
        })
      };
    }
  }, {
    key: "exportChildIds",
    value: function exportChildIds() {
      return {
        tableIds: this.tables.map(function (t) {
          return t.id;
        }),
        enumIds: this.enums.map(function (e) {
          return e.id;
        }),
        tableGroupIds: this.tableGroups.map(function (tg) {
          return tg.id;
        }),
        refIds: this.refs.map(function (r) {
          return r.id;
        })
      };
    }
  }, {
    key: "exportParentIds",
    value: function exportParentIds() {
      return {
        databaseId: this.database.id
      };
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        name: this.name,
        note: this.note,
        alias: this.alias
      };
    }
  }, {
    key: "normalize",
    value: function normalize(model) {
      model.schemas = _objectSpread({}, model.schemas, _defineProperty({}, this.id, _objectSpread({
        id: this.id
      }, this.shallowExport(), {}, this.exportChildIds(), {}, this.exportParentIds())));
      this.tables.forEach(function (table) {
        return table.normalize(model);
      });
      this.enums.forEach(function (_enum) {
        return _enum.normalize(model);
      });
      this.tableGroups.forEach(function (tableGroup) {
        return tableGroup.normalize(model);
      });
      this.refs.forEach(function (ref) {
        return ref.normalize(model);
      });
    }
  }]);

  return Schema;
}(_element["default"]);

var _default = Schema;
exports["default"] = _default;