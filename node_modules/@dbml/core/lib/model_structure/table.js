"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _element = _interopRequireDefault(require("./element"));

var _field = _interopRequireDefault(require("./field"));

var _indexes = _interopRequireDefault(require("./indexes"));

var _config = require("./config");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Table =
/*#__PURE__*/
function (_Element) {
  _inherits(Table, _Element);

  function Table() {
    var _this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        name = _ref.name,
        alias = _ref.alias,
        note = _ref.note,
        _ref$fields = _ref.fields,
        fields = _ref$fields === void 0 ? [] : _ref$fields,
        _ref$indexes = _ref.indexes,
        indexes = _ref$indexes === void 0 ? [] : _ref$indexes,
        _ref$schema = _ref.schema,
        schema = _ref$schema === void 0 ? {} : _ref$schema,
        token = _ref.token,
        headerColor = _ref.headerColor;

    _classCallCheck(this, Table);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this, token));
    _this.name = name;
    _this.alias = alias;
    _this.note = note;
    _this.headerColor = headerColor;
    _this.fields = [];
    _this.indexes = [];
    _this.schema = schema;
    _this.dbState = _this.schema.dbState;

    _this.generateId();

    _this.processFields(fields);

    _this.processIndexes(indexes);

    return _this;
  }

  _createClass(Table, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('tableId');
    }
  }, {
    key: "processFields",
    value: function processFields(rawFields) {
      var _this2 = this;

      if (rawFields.length === 0) {
        this.error('Table must have at least one field');
      }

      rawFields.forEach(function (field) {
        _this2.pushField(new _field["default"](_objectSpread({}, field, {
          table: _this2
        })));
      });
    }
  }, {
    key: "pushField",
    value: function pushField(field) {
      this.checkField(field);
      this.fields.push(field);
    }
  }, {
    key: "checkField",
    value: function checkField(field) {
      if (this.fields.some(function (f) {
        return f.name === field.name;
      })) {
        field.error("Field \"".concat(field.name, "\" existed in table ").concat((0, _utils.shouldPrintSchema)(this.schema) ? "\"".concat(this.schema.name, "\".") : '', "\"").concat(this.name, "\""));
      }
    }
  }, {
    key: "processIndexes",
    value: function processIndexes(rawIndexes) {
      var _this3 = this;

      rawIndexes.forEach(function (index) {
        _this3.pushIndex(new _indexes["default"](_objectSpread({}, index, {
          table: _this3
        })));
      });
    }
  }, {
    key: "pushIndex",
    value: function pushIndex(index) {
      this.checkIndex(index);
      this.indexes.push(index);
    }
  }, {
    key: "checkIndex",
    value: function checkIndex(index) {
      var _this4 = this;

      index.columns.forEach(function (column) {
        if (column.type === 'column' && !_this4.findField(column.value)) {
          index.error("Column \"".concat(column.value, "\" do not exist in table ").concat((0, _utils.shouldPrintSchema)(_this4.schema) ? "\"".concat(_this4.schema.name, "\".") : '', "\"").concat(_this4.name, "\""));
        }
      });
    }
  }, {
    key: "findField",
    value: function findField(fieldName) {
      return this.fields.find(function (f) {
        return f.name === fieldName;
      });
    }
  }, {
    key: "checkSameId",
    value: function checkSameId(table) {
      return this.schema.checkSameId(table.schemaName || _config.DEFAULT_SCHEMA_NAME) && (this.name === table.name || this.alias === table.name || this.name === table.alias || this.alias && this.alias === table.alias);
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread({}, this.shallowExport(), {}, this.exportChild());
    }
  }, {
    key: "exportChild",
    value: function exportChild() {
      return {
        fields: this.fields.map(function (f) {
          return f["export"]();
        }),
        indexes: this.indexes.map(function (i) {
          return i["export"]();
        })
      };
    }
  }, {
    key: "exportChildIds",
    value: function exportChildIds() {
      return {
        fieldIds: this.fields.map(function (f) {
          return f.id;
        }),
        indexIds: this.indexes.map(function (i) {
          return i.id;
        })
      };
    }
  }, {
    key: "exportParentIds",
    value: function exportParentIds() {
      return {
        schemaId: this.schema.id,
        groupId: this.group ? this.group.id : null
      };
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        name: this.name,
        alias: this.alias,
        note: this.note,
        headerColor: this.headerColor
      };
    }
  }, {
    key: "normalize",
    value: function normalize(model) {
      model.tables = _objectSpread({}, model.tables, _defineProperty({}, this.id, _objectSpread({
        id: this.id
      }, this.shallowExport(), {}, this.exportChildIds(), {}, this.exportParentIds())));
      this.fields.forEach(function (field) {
        return field.normalize(model);
      });
      this.indexes.forEach(function (index) {
        return index.normalize(model);
      });
    }
  }]);

  return Table;
}(_element["default"]);

var _default = Table;
exports["default"] = _default;